<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Chanomic Sketch</title><link>https://bombrary.github.io/sketch/</link><description>Recent content on Chanomic Sketch</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Sun, 27 Nov 2022 23:28:28 +0900</lastBuildDate><atom:link href="https://bombrary.github.io/sketch/index.xml" rel="self" type="application/rss+xml"/><item><title>Night City</title><link>https://bombrary.github.io/sketch/posts/night-city/</link><pubDate>Sat, 03 Dec 2022 07:00:00 +0900</pubDate><guid>https://bombrary.github.io/sketch/posts/night-city/</guid><description>別ページで閲覧 // const cols = [&amp;#39;#022C43&amp;#39;, &amp;#39;#053F5E&amp;#39;, &amp;#39;#115173&amp;#39;, &amp;#39;#FFD700&amp;#39;]; const cols = [&amp;#39;#001F3F&amp;#39;, &amp;#39;#083358&amp;#39;, &amp;#39;#0D63A5&amp;#39;, &amp;#39;#FFD717&amp;#39;]; const colsRedundant = [...new Array(8).fill(cols[0]), ...new Array(4).fill(cols[1]), ...new Array(2).fill(cols[2]), ...new Array(1).fill(cols[3])]; const dt = 1; function setup() { createCanvas(windowWidth, windowHeight); step = 0; colBg = color(&amp;#39;#001F3F&amp;#39;); background(cols[0]); noStroke(); for (let i = 0; i &amp;lt; 1000; i++) { const p1 = createVector(random(0, width), random(0, height)); const p2 = createVector(width / 2, height / 2); const vec = p5.</description></item><item><title>Night City</title><link>https://bombrary.github.io/sketch/works/night-city/</link><pubDate>Sat, 03 Dec 2022 07:00:00 +0900</pubDate><guid>https://bombrary.github.io/sketch/works/night-city/</guid><description/></item><item><title>Sea of Characters</title><link>https://bombrary.github.io/sketch/posts/sea-of-characters/</link><pubDate>Fri, 02 Dec 2022 11:35:00 +0900</pubDate><guid>https://bombrary.github.io/sketch/posts/sea-of-characters/</guid><description>別ページで閲覧 let entities; const [fontSizeMin, fontSizeMax] = [0, 100]; const [rMin, rMax] = [0, 100]; const [textDxMin, textDxMax] = [-50, 50]; const [textDyMin, textDyMax] = [-1, 0]; const [circleDxMin, circleDxMax] = [-0.5, 0.5]; const [circleDyMin, circleDyMax] = [-1, 0]; function setup() { createCanvas(windowWidth, windowHeight); smooth(); entities = [...createTexts(20), ...createCircles(20)]; } function draw() { background(&amp;#39;#181B39&amp;#39;); for (const e of entities) { e.move(); e.draw(); } } const createCircles = (n) =&amp;gt; Array.</description></item><item><title>Sea of Characters</title><link>https://bombrary.github.io/sketch/works/sea-of-characters/</link><pubDate>Fri, 02 Dec 2022 11:35:00 +0900</pubDate><guid>https://bombrary.github.io/sketch/works/sea-of-characters/</guid><description/></item><item><title>Circular Bars</title><link>https://bombrary.github.io/sketch/posts/circular-bars/</link><pubDate>Thu, 01 Dec 2022 11:25:00 +0900</pubDate><guid>https://bombrary.github.io/sketch/posts/circular-bars/</guid><description>別ページで閲覧 let r = 800; const dr = 100; const barMax = 100; const N = 400; let sep; function setup() { sep = TWO_PI / N; createCanvas(windowWidth, windowHeight); background(&amp;#39;#005b98&amp;#39;); } function draw() { translate(width / 2, height / 2); if (r &amp;lt;= 0) { noStroke(); fill(&amp;#39;white&amp;#39;); ellipse(0, 0, 2*dr, 2*dr); return; } const bars = createRandomBar(N, 0, barMax); let theta = 0; bars.forEach((bar) =&amp;gt; { fill(255); stroke(&amp;#39;orange&amp;#39;); drawBar(r, theta, sep, bar); theta += sep; }); r -= dr; } const drawBar = (r, theta, sep, bar) =&amp;gt; { const vs_polar = [ [r, theta], [r + bar, theta], [r + bar, theta + sep], [r, theta + sep], ] beginShape(); vs_polar.</description></item><item><title>Circular Bars</title><link>https://bombrary.github.io/sketch/works/circular-bars/</link><pubDate>Thu, 01 Dec 2022 10:42:45 +0900</pubDate><guid>https://bombrary.github.io/sketch/works/circular-bars/</guid><description/></item></channel></rss>